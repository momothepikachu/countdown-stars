import { EventEmitter } from 'events';

var Timer = /*@__PURE__*/(function (EventEmitter$$1) {
  function Timer(ref) {
    var this$1 = this;
    if ( ref === void 0 ) ref = {};
    var interval = ref.interval; if ( interval === void 0 ) interval = 1000;
    var stopwatch = ref.stopwatch; if ( stopwatch === void 0 ) stopwatch = false;

    EventEmitter$$1.call(this);
    this._duration = 0;
    this._endTime = 0;
    this._pauseTime = 0;
    this._status = 'stopped';

    this.tick = function () {
      if (this$1.status === 'paused') { return; }

      if (Date.now() >= this$1._endTime) {
        this$1.stop();
        this$1.emit('tick', this$1._stopwatch ? this$1._duration : 0);
        this$1.emit('done');
      } else {
        this$1.emit('tick', this$1.time);
      }
    };

    this._interval = interval;
    this._stopwatch = stopwatch;
  }

  if ( EventEmitter$$1 ) Timer.__proto__ = EventEmitter$$1;
  Timer.prototype = Object.create( EventEmitter$$1 && EventEmitter$$1.prototype );
  Timer.prototype.constructor = Timer;

  var prototypeAccessors = { time: { configurable: true },duration: { configurable: true },status: { configurable: true } };

  Timer.prototype.start = function start (duration, interval) {
    if (this.status !== 'stopped') { return; }
    if (duration == null) { throw new TypeError('Must provide duration parameter'); }
    this._duration = duration;
    this._endTime = Date.now() + duration;

    this._changeStatus('running');

    this.emit('tick', this._stopwatch ? 0 : this._duration);
    this._timeoutID = setInterval(this.tick, interval || this._interval);
  };

  Timer.prototype.stop = function stop () {
    if (this._timeoutID) { clearInterval(this._timeoutID); }

    this._changeStatus('stopped');
  };

  Timer.prototype.pause = function pause () {
    if (this.status !== 'running') { return; }
    this._pauseTime = Date.now();

    this._changeStatus('paused');
  };

  Timer.prototype.resume = function resume () {
    if (this.status !== 'paused') { return; }
    this._endTime += Date.now() - this._pauseTime;
    this._pauseTime = 0;

    this._changeStatus('running');
  };

  Timer.prototype._changeStatus = function _changeStatus (status) {
    this._status = status;
    this.emit('statusChanged', this.status);
  };

  prototypeAccessors.time.get = function () {
    if (this.status === 'stopped') { return 0; }
    var time = this.status === 'paused' ? this._pauseTime : Date.now();
    var left = this._endTime - time;
    return this._stopwatch ? this._duration - left : left;
  };

  prototypeAccessors.duration.get = function () {
    return this._duration;
  };

  prototypeAccessors.status.get = function () {
    return this._status;
  };

  Object.defineProperties( Timer.prototype, prototypeAccessors );

  return Timer;
}(EventEmitter));

export default Timer;
//# sourceMappingURL=tiny-timer.mjs.map
